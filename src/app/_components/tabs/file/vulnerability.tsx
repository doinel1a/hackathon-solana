import React, { useState } from 'react';

import type { TVulnerability } from '@/agents/audit';

import { CircleDot, Loader2 } from 'lucide-react';
import Link from 'next/link';

import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/components/ui/toast/use-toast';
import { cn } from '@/lib/utils';

type TFileFileVulnerabilityProperties = {
  ghUsername: string;
  repoName: string;
  vulnerability: TVulnerability;
};

export default function FileVulnerability({
  ghUsername,
  repoName,
  vulnerability
}: TFileFileVulnerabilityProperties) {
  const [isOpeningIssue, setIsOpeningIssue] = useState(false);

  const { toast } = useToast();

  async function onOpenIssueClick() {
    setIsOpeningIssue(true);

    const response = await fetch('/api/github/issue', {
      method: 'POST',
      body: JSON.stringify({ ghUsername, repoName, issue: vulnerability })
    });
    const responseBody: unknown = await response.json();

    if (
      !response.ok &&
      responseBody &&
      typeof responseBody === 'object' &&
      'error' in responseBody &&
      responseBody.error &&
      typeof responseBody.error === 'object' &&
      'response' in responseBody.error &&
      responseBody.error.response &&
      typeof responseBody.error.response === 'object' &&
      'data' in responseBody.error.response &&
      responseBody.error.response.data &&
      typeof responseBody.error.response.data === 'object' &&
      'message' in responseBody.error.response.data &&
      responseBody.error.response.data.message &&
      typeof responseBody.error.response.data.message === 'string' &&
      'documentation_url' in responseBody.error.response.data &&
      responseBody.error.response.data.documentation_url &&
      typeof responseBody.error.response.data.documentation_url === 'string'
    ) {
      toast({
        variant: 'destructive',
        title: 'Error opening issue',
        description: (
          <div className='flex flex-col gap-y-1'>
            <p>{responseBody.error.response.data.message}.</p>
            <p>
              Checkout{' '}
              <Link href={responseBody.error.response.data.documentation_url}>
                GitHub&apos;s documentation
              </Link>
              .
            </p>
          </div>
        )
      });

      setIsOpeningIssue(false);

      return;
    }

    toast({
      title: 'Success',
      description: (
        <>
          <p>Issue opened successfully.</p>
          <span className='absolute bottom-0 left-0 h-2 w-full bg-green-400' />
        </>
      )
    });

    setIsOpeningIssue(false);
  }

  return (
    <li className='flex h-auto w-full flex-col gap-y-2.5 rounded-md border border-border bg-muted/35 p-2.5'>
      <div className='flex items-center gap-x-5'>
        <p
          className={cn('overflow-x-auto whitespace-nowrap text-sm font-medium', {
            'text-green-400': vulnerability.severity === 'Low',
            'text-yellow-400': vulnerability.severity === 'Medium',
            'text-red-400': vulnerability.severity === 'High'
          })}
        >
          {vulnerability.title}
        </p>

        <Button
          variant='ghost'
          className='flex h-5 items-center justify-center gap-x-1 px-2 py-0 text-xs'
          disabled={isOpeningIssue}
          onClick={onOpenIssueClick}
        >
          {isOpeningIssue ? (
            <Loader2 className='h-3.5 w-3.5 animate-spin' />
          ) : (
            <CircleDot className='h-3.5 w-3.5' />
          )}
          {isOpeningIssue ? 'Opening' : 'Open'} issue
        </Button>
      </div>

      <div className='flex w-full gap-x-5'>
        <div className='flex w-1/2 flex-col gap-y-1.5 overflow-hidden'>
          <span className='text-xs text-muted-foreground'>Description</span>
          <Textarea
            value={vulnerability.description}
            className='h-40 resize-none focus-visible:ring-0'
            readOnly
          />
        </div>

        <div className='flex w-1/2 flex-col gap-y-1.5 overflow-hidden'>
          <span className='text-xs text-muted-foreground'>Recommendation</span>
          <Textarea
            value={vulnerability.recommendation}
            className='h-40 resize-none focus-visible:ring-0 focus-visible:ring-transparent focus-visible:ring-offset-0'
            readOnly
          />
        </div>
      </div>
    </li>
  );
}
